{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","post","setPost","loadding","setLoadding","color","setColor","comments","setComments","colors","useEffect","loadData","obj","a","randomNumber","Math","floor","random","axios","length","data","className","Button","icon","content","basic","onClick","Object","keys","Message","Header","title","body","Comment","Group","size","as","dividing","map","comment","index","key","Content","Author","name","Metadata","email","Text","Dimmer","active","inverted","Loader","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gXAMe,SAASA,IAAO,IAAD,EACJC,mBAAS,IADL,mBACrBC,EADqB,KACfC,EADe,OAEIF,oBAAS,GAFb,mBAErBG,EAFqB,KAEXC,EAFW,OAIFJ,mBAAS,IAJP,mBAIrBK,EAJqB,KAIdC,EAJc,OAKIN,mBAAS,IALb,mBAKrBO,EALqB,KAKXC,EALW,KAOtBC,EAAS,CACb,MACA,SACA,SACA,QACA,QACA,OACA,OACA,SACA,SACA,OACA,QACA,OACA,SAGFC,qBAAU,WACRC,MACC,IAEH,IAiBgBC,EAjBVD,EAAQ,uCAAG,gCAAAE,EAAA,sEAEbT,GAAY,GACNU,EAAeC,KAAKC,MAAsB,IAAhBD,KAAKE,UAHxB,SAIMC,IACjB,8CAAgDJ,GALrC,cAIPb,EAJO,gBAOUiB,IACrB,wDAA0DJ,GAR/C,OAOPP,EAPO,OAUbD,EAASG,EAAOM,KAAKC,MAAMD,KAAKE,SAAWR,EAAOU,UAClDjB,EAAQD,EAAKmB,MACbZ,EAAYD,EAASa,MACrBhB,GAAY,GAbC,4GAAH,qDAqBd,OACE,yBAAKiB,UAAU,OACb,kBAACC,EAAA,EAAD,CACEC,KAAK,OACLC,QAAQ,WACRnB,MAAM,OACNoB,OAAK,EACLC,QAASf,KAXCC,EAaFX,IAZuB,IAA5B0B,OAAOC,KAAKhB,GAAKO,SAapB,oCACE,kBAACU,EAAA,EAAD,CAASxB,MAAOA,GACd,kBAACwB,EAAA,EAAQC,OAAT,KAAiB7B,EAAK8B,OACtB,2BAAI9B,EAAK+B,OAEX,kBAACC,EAAA,EAAQC,MAAT,CAAeC,KAAK,QAClB,kBAACL,EAAA,EAAD,CAAQM,GAAG,KAAKC,UAAQ,GAAxB,YAGC9B,EAAS+B,KAAI,SAACC,EAASC,GAAV,OACZ,kBAACP,EAAA,EAAD,CAASQ,IAAKD,GACZ,kBAACP,EAAA,EAAQS,QAAT,KACE,kBAACT,EAAA,EAAQU,OAAT,CAAgBP,GAAG,KAAKG,EAAQK,MAChC,kBAACX,EAAA,EAAQY,SAAT,KACE,8BAAON,EAAQO,QAEjB,kBAACb,EAAA,EAAQc,KAAT,KAAeR,EAAQP,cAOnC,kBAACgB,EAAA,EAAD,CAAQC,OAAQ9C,EAAU+C,UAAQ,GAChC,kBAACC,EAAA,EAAD,CAAQD,UAAQ,GAAhB,aC5EYE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d02cce1f.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Message,Comment, Header,Dimmer, Loader, Button } from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./App.css\";\n\nexport default function App() {\n  const [post, setPost] = useState({});\n  const [loadding, setLoadding] = useState(false);\n\n  const [color, setColor] = useState(\"\");\n  const [comments, setComments] = useState([]);\n\n  const colors = [\n    \"red\",\n    \"orange\",\n    \"yellow\",\n    \"olive\",\n    \"green\",\n    \"teal\",\n    \"blue\",\n    \"violet\",\n    \"purple\",\n    \"pink\",\n    \"brown\",\n    \"grey\",\n    \"black\"\n  ];\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const loadData =(async () => {\n    try {\n      setLoadding(true);\n      const randomNumber = Math.floor(Math.random() * 101);\n      const post = await axios(\n        \"https://jsonplaceholder.typicode.com/posts/\" + randomNumber\n      );\n      const comments = await axios(\n        \"https://jsonplaceholder.typicode.com/comments?postId=\" + randomNumber\n      );\n      setColor(colors[Math.floor(Math.random() * colors.length)]);\n      setPost(post.data);\n      setComments(comments.data);\n      setLoadding(false);\n    } catch (error) {}\n  });\n\n  const isEmpty = obj => {\n    return Object.keys(obj).length === 0;\n  };\n\n  return (\n    <div className=\"App\">\n      <Button\n        icon=\"undo\"\n        content=\"Loadpost\"\n        color=\"blue\"\n        basic\n        onClick={loadData}\n      />\n      {!isEmpty(post) && (\n        <>\n          <Message color={color}>\n            <Message.Header>{post.title}</Message.Header>\n            <p>{post.body}</p>\n          </Message>\n          <Comment.Group size=\"mini\">\n            <Header as=\"h3\" dividing>\n              Comments\n            </Header>\n            {comments.map((comment, index) => (\n              <Comment key={index}>\n                <Comment.Content>\n                  <Comment.Author as=\"a\">{comment.name}</Comment.Author>\n                  <Comment.Metadata>\n                    <span>{comment.email}</span>\n                  </Comment.Metadata>\n                  <Comment.Text>{comment.body}</Comment.Text>\n                </Comment.Content>\n              </Comment>\n            ))}\n          </Comment.Group>\n        </>\n      )}\n      <Dimmer active={loadding} inverted>\n        <Loader inverted>Loading</Loader>\n      </Dimmer>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}